// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package repository

import (
	"context"
)

const addVpg = `-- name: AddVpg :one

INSERT INTO vpg (
    vpg_id,
    task_id,
    status
) VALUES (
    $1,
    $2,
    $3
)
RETURNING vpg_id, task_id, status
`

type AddVpgParams struct {
	VpgID  string
	TaskID string
	Status int32
}

// -- name: GetRunningVPGs :many
// SELECT * FROM vpg WHERE status = 1;
func (q *Queries) AddVpg(ctx context.Context, arg AddVpgParams) (Vpg, error) {
	row := q.db.QueryRowContext(ctx, addVpg, arg.VpgID, arg.TaskID, arg.Status)
	var i Vpg
	err := row.Scan(&i.VpgID, &i.TaskID, &i.Status)
	return i, err
}

const getNonReadyVPGs = `-- name: GetNonReadyVPGs :many
SELECT vpg_id, task_id, status FROM vpg WHERE status != 2
`

func (q *Queries) GetNonReadyVPGs(ctx context.Context) ([]Vpg, error) {
	rows, err := q.db.QueryContext(ctx, getNonReadyVPGs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vpg
	for rows.Next() {
		var i Vpg
		if err := rows.Scan(&i.VpgID, &i.TaskID, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE vpg SET status = $1 WHERE vpg_id = $2
`

type UpdateStatusParams struct {
	Status int32
	VpgID  string
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Status, arg.VpgID)
	return err
}
